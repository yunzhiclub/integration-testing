  name: GitHub Actions
  run-name: intergationTesting

  env: 
    PROJECT_NAME: intergationTesting
    DB_NAME: "intergationTesting"
    DB_USER: "intergationTesting"
    DB_PASSWORD: "intergationTesting"
    DB_ROOT_PASSWORD: "yunzhi.club"
    HTTP_EXPORT_PORT: 801
    DB_EXPORT_PORT: 17134

  on:
    push:
      tags:
        '*'
    pull_request:
      branches: [ main ]

  jobs:
    unit-test:
      runs-on: ubuntu-latest
      # 定义任务的步骤
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 18.16.0

        - name: angular-test
          run: |
            pwd
            cd web
            env
            pwd
            npm install
            npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
            npm run build

    spring-boot-test:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4

        - name: build mysql
          run: |
            docker pull mysql:8.0
            docker run -p 3307:3306 -e MYSQL_ROOT_PASSWORD=yunzhi -e MYSQL_DATABASE=integrationTesting -d mysql:8.0 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci

        - name: Set up JDK17
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'temurin'
            cache: maven

        - name: springboot-test
          run: |
            pwd
            cd api
            env
            pwd
            mvn install
            mvn -v
            mvn test
            mvn --batch-mode package
            
            
    angular-build: 
      runs-on: ubuntu-latest
      if: github.event_name == 'push'
      needs: [unit-test, spring-boot-test]
      steps: 
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 18.16.0
        - name: angular-build
          run: |
            cd web
            env
            npm install --no-audit
            npm run build
            mv dist/* ../dist
        - name: Upload API Artifact
          uses: actions/upload-artifact@v4
          with:
            name: dist
            path: dist

    api-build:
      runs-on: ubuntu-latest
      if: github.event_name == 'push'
      needs: [unit-test, spring-boot-test]
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        - name: Set up JDK17
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'temurin'
            cache: maven
        - name: build
          run: |
            cd api
            env
            mvn -v
            mvn package -Dmaven.test.skip
            mv target/*.jar ../app.jar
            ls -l ../
        - name: Upload API Artifact
          uses: actions/upload-artifact@v4
          with:
            name: app-jar
            path: app.jar 
    
    deploy: 
      runs-on: self-hosted
      needs: [api-build, angular-build]
      env:
        https_proxy: http://192.168.10.5:7890
        http_proxy: http://192.168.10.5:7890
        all_proxy: socks5://192.168.10.5:7891
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        - name: Download Angular Artifact
          uses: actions/download-artifact@v4
          with:
            name: dist
            path: dist  # 指定下载到的路径
    
        # 下载 Spring Boot 项目构建产物
        - name: Download API Artifact
          uses: actions/download-artifact@v4
          with:
            name: app-jar
            path: app.jar  # 指定下载到的路径

        - name: Display Current Directory
          run: ls -a -l
    
        - name: Create Directories
          run: |
            mkdir -p /home/app/${{ env.PROJECT_NAME }}
            mkdir -p /home/app/${{ env.PROJECT_NAME }}/db
            mkdir -p /home/app/${{ env.PROJECT_NAME }}/backups
    
        - name: Clean Previous Configurations
          run: |
            rm -f /home/app/${{ env.PROJECT_NAME }}/nginx.conf
            rm -f /home/app/${{ env.PROJECT_NAME }}/app.jar
            rm -f /home/app/${{ env.PROJECT_NAME }}/application.yml
            rm -rf /home/app/${{ env.PROJECT_NAME }}/web

        - name: Copy dist directory to target directory
          run: cp -r /home/yunzhi/actions-runner/_work/integration-testing/integration-testing/dist /home/app/${{ env.PROJECT_NAME }}/web
            
        - name: Copy app.jar to target directory
          run: cp /home/yunzhi/actions-runner/_work/integration-testing/integration-testing/app.jar/app.jar /home/app/${{ env.PROJECT_NAME }}/app.jar
        - name: Create Docker Network
          run: |
            docker network inspect ${{ env.PROJECT_NAME }}-network >/dev/null 2>&1 || \
            docker network create --driver bridge ${{ env.PROJECT_NAME }}-network --subnet=172.16.0.0/24
    
        
        - name: Update Nginx Configuration
          run: sed -i "s/api-server/${{ env.PROJECT_NAME }}-api/g" /home/yunzhi/actions-runner/_work/integration-testing/integration-testing/nginx.conf
  
        - name: Copy Nginx Configuration
          run: cp /home/yunzhi/actions-runner/_work/integration-testing/integration-testing/nginx.conf /home/app/${{ env.PROJECT_NAME }}/nginx.conf
 
        - name: Copy application Configuration
          run: cp /home/yunzhi/actions-runner/_work/integration-testing/integration-testing/application.yml /home/app/${{ env.PROJECT_NAME }}/application.yml

        - name: Update Application Configuration
          run: |
              sed "s/\$DB_PASSWORD/$DB_PASSWORD/g" /home/app/${{ env.DB_PASSWORD }}/application.yml | \
              sed "s/\$PROJECT_NAME/${{ env.PROJECT_NAME }}/g" | \
              sed "s/\$DB_NAME/${{env.DB_NAME}}/g" | \
              sed "s/\$DB_USER/$DB_USER/g" > /home/app/${{ env.PROJECT_NAME }}/application.yml
      
        - name: Display Nginx Configuration
          run: cat /home/yunzhi/actions-runner/_work/integration-testing/integration-testing/nginx.conf
        
        - name: Display application Configuration
          run: cat /home/yunzhi/actions-runner/_work/integration-testing/integration-testing/application.yml

        - name: Display application Configuration
          run: cat /home/app/${{ env.PROJECT_NAME }}/application.yml
    
    
        - name: Stop Existing Containers
          run: |
            if [ "$(docker ps -q -f name=${{ env.PROJECT_NAME }}-api)" ]; then
            docker stop ${{ env.PROJECT_NAME }}-api
            fi
            if [ "$(docker ps -q -f name=${{ env.PROJECT_NAME }}-nginx)" ]; then
              docker stop ${{ env.PROJECT_NAME }}-nginx
            fi
            if [ "$(docker ps -q -f name=${{ env.PROJECT_NAME }}-db)" ]; then
              docker stop ${{ env.PROJECT_NAME }}-db
            fi
    
        - name: Remove API Container if ResetAPI Tag
          run: |
            if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == *"refs/tags/#resetapi"* ]]; then
              if [ "$(docker ps -a -q -f name=${{ env.PROJECT_NAME }}-api)" ]; then
                echo 'remove api container' && docker rm ${{ env.PROJECT_NAME }}-api
              fi
            fi
    
        - name: Backup Database if BackDB Tag
          run: |
            if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == *"refs/tags/#backdb"* ]]; then
              echo 'backup db'
              NOW=$(date +"%Y-%m-%d-%H-%M-%S")
              tar czf /home/app/${{ env.PROJECT_NAME }}/backups/dbbackup-$NOW.tar.gz /home/app/${{ env.PROJECT_NAME }}/db
            fi
    
        - name: Reset Database if ResetDB Tag
          run: |
            if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == *"refs/tags/#resetdb"* ]]; then
              if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" != *"refs/tags/#backdb"* ]]; then
                echo 'backup db'
                NOW=$(date +"%Y-%m-%d-%H-%M-%S")
                tar czf /home/app/${{ env.PROJECT_NAME }}/backups/dbbackup-$NOW.tar.gz /home/app/${{ env.PROJECT_NAME }}/db
              fi
              if [ "$(docker ps -a -q -f name=${{ env.PROJECT_NAME }}-db)" ]; then
                echo 'remove db container' && docker rm ${{ env.PROJECT_NAME }}-db && rm -rf /home/app/${{ env.PROJECT_NAME }}/db
              fi
            fi
        
    
        - name: Reset Nginx or Web if ResetNginx or ResetWeb Tag
          run: |
            if [[ "${{ github.event_name }}" == "push" && ( "${{ github.ref }}" == *"refs/tags/#resetnginx"* || "${{ github.ref }}" == *"refs/tags/#resetweb"* ) ]]; then
              if [ "$(docker ps -a -q -f name=${{ env.PROJECT_NAME }}-nginx)" ]; then
                echo 'remove nginx container' && docker rm ${{ env.PROJECT_NAME }}-nginx
              fi
            fi
    
        - name: Create or Check Nginx Container
          run: |
            if [ "$(docker ps -a -q -f name=${{ env.PROJECT_NAME }}-nginx)" ]; then
            echo "${{ env.PROJECT_NAME }}-nginx exist"
            else
              echo "create ${{ env.PROJECT_NAME }}-nginx"
              docker create -p ${{ env.HTTP_EXPORT_PORT }}:80 --cpus=1 --memory=1G --name=${{ env.PROJECT_NAME }}-nginx \
              --network=${{ env.PROJECT_NAME }}-network \
              -v /home/app/${{ env.PROJECT_NAME }}/web:/usr/share/nginx/html:ro \
              -v /home/app/${{ env.PROJECT_NAME }}/nginx.conf:/etc/nginx/conf.d/default.conf:ro \
              nginx
            fi
    
        - name: Create or Check Database Container
          run: |
            if [ "$(docker ps -a -q -f name=${{ env.PROJECT_NAME }}-db)" ]; then
              echo "${{ env.PROJECT_NAME }}-db exist"
            else
              echo "create ${{ env.PROJECT_NAME }}-db"
              docker create --cpus=1 --memory=2G --name=${{ env.PROJECT_NAME }}-db \
              -p ${{ env.DB_EXPORT_PORT }}:3306 \
              --network=${{ env.PROJECT_NAME }}-network \
              -e MYSQL_ROOT_PASSWORD=${{ env.DB_ROOT_PASSWORD }} -e MYSQL_DATABASE=${{ env.DB_NAME }} \
              -e MYSQL_USER=${{ env.DB_USER }} -e MYSQL_PASSWORD=${{ env.DB_PASSWORD }} \
              -v /home/app/${{ env.PROJECT_NAME }}/db:/var/lib/mysql \
              mysql:8.0 \
              --character-set-server=utf8mb4 \
              --collation-server=utf8mb4_unicode_ci
            fi

        - name: Create or Check API Container
          run: |
            if [ "$(docker ps -a -q -f name=${{ env.PROJECT_NAME }}-api)" ]; then
                echo "${{ env.PROJECT_NAME }}-api exist"
            else
              echo "create ${{ env.PROJECT_NAME }}-api"
                docker create --cpus=2 --memory=4G --name=${{ env.PROJECT_NAME }}-api \
                --network=${{ env.PROJECT_NAME }}-network \
                --workdir=/opt/app \
                -v /home/app/${{ env.PROJECT_NAME }}:/opt/app \
                chenyingzhou/jdk17-mvn-git  \
                java -jar app.jar \
                --spring.config.location=/opt/app/
            fi

        - name: Start Containers
          run: |
            docker start ${{ env.PROJECT_NAME }}-db
            sleep 1m
            docker start ${{ env.PROJECT_NAME }}-api
            docker start ${{ env.PROJECT_NAME }}-nginx
            sleep 1m

        - name: Display Running Containers
          run: docker ps
            
    dingding-error:
      runs-on: ubuntu-latest
      needs: [unit-test, spring-boot-test]
      if: ${{ failure() }}
      steps:
        - uses: actions/checkout@v4
        - name: Send dingding notify error
          uses: zcong1993/actions-ding@master
          with:
            dingToken: bef0c36558d1788bca4364a9b19c8bf72a6e8c72365e22fe1ce9656b34b1a2ca
            body: |
              {
                "msgtype": "text",
                "text": {
                    "content": '[打叉][打叉][打叉]  执行失败\n提交者: ${{ github.triggering_actor }}\n任务: ${{ github.event.pull_request.title }}\n${{ github.ref_type }}: ${{ github.head_ref }}\n${{ github.event_name }}: ${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.number }}'
                }
              }
              

    dingding-success:
      runs-on: ubuntu-latest
      if: ${{ success() }}
      needs: [unit-test, spring-boot-test]
      steps:
        - uses: actions/checkout@v4
        - name: Send dingding notify success
          uses: zcong1993/actions-ding@master
          with:
            dingToken: bef0c36558d1788bca4364a9b19c8bf72a6e8c72365e22fe1ce9656b34b1a2ca
            body: |
              {
               "msgtype": "text",
               "text": {
                   "content": '[微笑][微笑][微笑]  执行成功\n提交者: ${{ github.triggering_actor }}\n任务: ${{ github.event.pull_request.title }}\n${{ github.ref_type }}: ${{ github.head_ref }}\n${{ github.event_name }}: ${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.number }}'
               }
              }

    dingding-deploy-success:
      runs-on: ubuntu-latest
      if: ${{ success() }} 
      needs: [deploy]
      steps:
        - uses: actions/checkout@v4
        - name: Send dingding notify success
          uses: zcong1993/actions-ding@master
          with:
            dingToken: bef0c36558d1788bca4364a9b19c8bf72a6e8c72365e22fe1ce9656b34b1a2ca
            body: |
              {
              "msgtype": "text",
              "text": {
                  "content": '[微笑]  ${{ env.PROJECT_NAME }}构建成功，提交者: ${{ github.triggering_actor }}'
              }
              }  

    dingding-deploy-error:
      runs-on: ubuntu-latest
      if: ${{ failure() }}
      needs: [deploy]
      steps:
        - uses: actions/checkout@v4
        - name: Send dingding notify error
          uses: zcong1993/actions-ding@master
          with:
            dingToken: bef0c36558d1788bca4364a9b19c8bf72a6e8c72365e22fe1ce9656b34b1a2ca
            body: |
              {
                "msgtype": "text",
                "text": {
                    "content": '[打叉]  ${{ env.PROJECT_NAME }} 构建失败，提交者: ${{ github.triggering_actor }}'
              }
              }
